<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>姿态估计模型使用：YoloPose, TransPose, AlphaPose</title>
      <link href="/2023/01/03/zi-tai-gu-ji-mo-xing-shi-yong-yolopose-transpose-alphapose/"/>
      <url>/2023/01/03/zi-tai-gu-ji-mo-xing-shi-yong-yolopose-transpose-alphapose/</url>
      
        <content type="html"><![CDATA[<p>由于师兄让我帮助完成一些实验验证任务，需要使用YoloPose, TransPose, AlphaPose这三个人体姿态估计的模型，整理了这三个模型的开源代码仓库和环境配置要点，以备不时之需。</p><h2 id="YoloPose-环境配置"><a href="#YoloPose-环境配置" class="headerlink" title="YoloPose 环境配置"></a>YoloPose 环境配置</h2><p>这个貌似难点在于找到代码和模型文件（因为官方提供的模型权重文件下载链接是失效的），师兄找到了一个别人fork的仓库可以使用。</p><ul><li>官方仓库地址：<a href="https://github.com/TexasInstruments/edgeai-yolov5/tree/yolo-pose">TexasInstruments/edgeai-yolov5 at yolo-pose (github.com)</a></li><li>可以使用的仓库地址：<a href="https://github.com/BingfengYan/yolo_pose">BingfengYan/yolo_pose (github.com)</a></li><li>我的仓库地址（以防万一我再fork一份得了）：<a href="https://github.com/fffqh/yolo_pose">fffqh/yolo_pose (github.com)</a></li></ul><p>使用的模型测试命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python test.py --data coco_kpts.yaml --img <span class="token number">960</span> --conf <span class="token number">0.001</span> --iou <span class="token number">0.65</span> --weights <span class="token string">"path to the pre-trained ckpt"</span> --kpt-label<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意 coco_kpts.yaml 文件需要从<strong>官方仓库</strong> <a href="https://github.com/TexasInstruments/edgeai-yolov5/tree/yolo-pose">TexasInstruments/edgeai-yolov5 at yolo-pose (github.com)</a> 中的 data 目录中复制一份到项目的根目录下</li><li>注意需要把”path to the pre-trained ckpt” 替换成下载的模型文件路径，例如使用<code>--weights last-pretrained.pt</code></li></ul><p>使用的脚本（有一些特殊任务需要替换验证的数据集，采用软连接的方式替换）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">num</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token keyword">do</span><span class="token function">rm</span> -rf /root/coco_kpts/images/val2017<span class="token function">ln</span> -s <span class="token string">'/root/autodl-tmp/whole/'</span><span class="token variable">$num</span> <span class="token string">'/root/coco_kpts/images/val2017'</span><span class="token function">ls</span> -l /root/coco_kpts/images/python test.py --data coco_kpts.yaml --img <span class="token number">960</span> --conf <span class="token number">0.001</span> --iou <span class="token number">0.65</span> --weights last-pretrained.pt --kpt-label<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TransPose-环境配置"><a href="#TransPose-环境配置" class="headerlink" title="TransPose 环境配置"></a>TransPose 环境配置</h2><p>TransPose貌似是最简单的一个，遇到的问题没那么多，官方仓库地址：<a href="https://github.com/yangsenius/TransPose">yangsenius/TransPose: PyTorch Implementation for “TransPose: Keypoint localization via Transformer”, ICCV 2021. (github.com)</a>。</p><p>需要下载特殊格式(yolo格式)的coco标注文件，从官方仓库的readme中进入下载链接即可：</p><p><img src="https://cdn.jsdelivr.net/gh/fffqh/img_hosting/img/20230103023917.png"></p><p>需要下载共7个预训练模型文件，从官方仓库的readme中进入下载链接即可：</p><p><img src="https://cdn.jsdelivr.net/gh/fffqh/img_hosting/img/20230103023950.png"></p><p>使用的脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">num</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token keyword">do</span><span class="token function">rm</span> -rf ./data/coco/images/val2017<span class="token function">ln</span> -s <span class="token string">'/root/autodl-tmp/whole/'</span><span class="token variable">$num</span> ./data/coco/images/val2017python tools/test.py --cfg experiments/coco/transpose_h/TP_H_w32_256x192_stage3_1_4_d64_h128_relu_enc4_mh1.yaml TEST.USE_GT_BBOX True<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AlphaPose-环境配置"><a href="#AlphaPose-环境配置" class="headerlink" title="AlphaPose 环境配置"></a>AlphaPose 环境配置</h2><p>官方仓库地址：<a href="https://github.com/MVIG-SJTU/AlphaPose">MVIG-SJTU/AlphaPose: Real-Time and Accurate Full-Body Multi-Person Pose Estimation&amp;Tracking System (github.com)</a></p><p>官方仓库中给出详细的环境配置指导：<a href="https://github.com/MVIG-SJTU/AlphaPose/blob/master/docs/INSTALL.md">https://github.com/MVIG-SJTU/AlphaPose/blob/master/docs/INSTALL.md</a></p><p>注意需要下载权重文件：</p><p><img src="https://cdn.jsdelivr.net/gh/fffqh/img_hosting/img/20230103024540.png"></p><p>需要下载ModelZoo中的FastPose模型：</p><p><img src="https://cdn.jsdelivr.net/gh/fffqh/img_hosting/img/20230103024636.png"></p><p>注意需要在AlphaPose项目根目录下自行建立文件夹路径<code>./exp/json/</code>，不然会出错，详情参考issue：<a href="https://github.com/MVIG-SJTU/AlphaPose/issues/780">Where can I find “validate_gt_kpt.json”? · Issue #780 · MVIG-SJTU/AlphaPose (github.com)</a>。</p><p>验证命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./scripts/validate.sh configs/coco/resnet/256x192_res50_lr1e-3_1x.yaml pretrained_models/fast_res50_256x192.pth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">num</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token keyword">do</span><span class="token function">rm</span> -rf ./data/coco/val2017<span class="token function">ln</span> -s <span class="token string">'/root/autodl-tmp/whole/'</span><span class="token variable">$num</span> <span class="token string">'./data/coco/val2017'</span>./scripts/validate.sh configs/coco/resnet/256x192_res50_lr1e-3_1x.yaml pretrained_models/fast_res50_256x192.pth<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模型环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科研写作辅助工具收集</title>
      <link href="/2023/01/03/ke-yan-xie-zuo-fu-zhu-gong-ju-shou-ji/"/>
      <url>/2023/01/03/ke-yan-xie-zuo-fu-zhu-gong-ju-shou-ji/</url>
      
        <content type="html"><![CDATA[<p>虽然说英文写作能力是sci写作的基础，但是使用一些科研写作的辅助工具能够一定程度上提高自己的写作水平，从b站上搜罗了一些辅助工具，整理在这里：</p><h2 id="语料库-COCA"><a href="#语料库-COCA" class="headerlink" title="语料库 COCA"></a>语料库 COCA</h2><ul><li>链接：<a href="https://www.english-corpora.org/coca/">https://www.english-corpora.org/coca/</a></li></ul><h2 id="科研语料库-Academic-PhraseBank"><a href="#科研语料库-Academic-PhraseBank" class="headerlink" title="科研语料库 Academic PhraseBank"></a>科研语料库 Academic PhraseBank</h2><ul><li>链接：<a href="https://www.phrasebank.manchester.ac.uk/">https://www.phrasebank.manchester.ac.uk/</a></li></ul><h2 id="润色替换-QuillBot"><a href="#润色替换-QuillBot" class="headerlink" title="润色替换 QuillBot"></a>润色替换 QuillBot</h2><ul><li>链接：<a href="https://quillbot.com/plagiarism-checker">https://quillbot.com/plagiarism-checker</a></li></ul><h2 id="高级词典-Linggle"><a href="#高级词典-Linggle" class="headerlink" title="高级词典 Linggle"></a>高级词典 Linggle</h2><ul><li>链接：<a href="https://linggle.com/">https://linggle.com/</a></li></ul><h2 id="语法检查-Grammarly"><a href="#语法检查-Grammarly" class="headerlink" title="语法检查 Grammarly"></a>语法检查 Grammarly</h2><ul><li>链接：<a href="https://www.grammarly.com/grammar-check">https://www.grammarly.com/grammar-check</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速将JavaScript项目打包成Electron桌面应用</title>
      <link href="/2021/08/14/ru-he-kuai-su-jiang-javascript-xiang-mu-da-bao-cheng-electron-zhuo-mian-ying-yong/"/>
      <url>/2021/08/14/ru-he-kuai-su-jiang-javascript-xiang-mu-da-bao-cheng-electron-zhuo-mian-ying-yong/</url>
      
        <content type="html"><![CDATA[<p>前情提要：<br>为了完成某门课设作业，使用 html + css + javascript 与 bootstrap 框架、d3.js、dagre-d3 等库糊了两个web演示界面（分别是 赫夫曼编码演示 与 AOE网演示 ）。<br>写完后，尝试使用 electron 将其打包成桌面应用，方便助教查看。</p><span id="more"></span><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>此处省略。网上资料比较多。</p><h2 id="调整项目"><a href="#调整项目" class="headerlink" title="调整项目"></a>调整项目</h2><p>需要对项目的文件结构做 一些微调，具体步骤如下。</p><h3 id="Step-1-新建配置文件"><a href="#Step-1-新建配置文件" class="headerlink" title="Step 1. 新建配置文件"></a>Step 1. 新建配置文件</h3><p>在项目目录下新建文件 package.json , 内容如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"name"</span>    <span class="token operator">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>    <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token string">"1.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"main"</span>    <span class="token operator">:</span> <span class="token string">"main.js"</span>  # 重要：代表electron程序的入口文件，即程序主进程。<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-2-新建main-js-文件"><a href="#Step-2-新建main-js-文件" class="headerlink" title="Step 2. 新建main.js 文件"></a>Step 2. 新建main.js 文件</h3><p>此为程序主进程文件，用于窗口管理等。<strong>特别注意</strong>：应将项目原有的js代码与其分文件放置（若原项目的js文件同名，则应相应更名）。<br>main.js 中的代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app<span class="token punctuation">;</span><span class="token comment">//const app = require('app');</span><span class="token keyword">const</span> BrowserWindow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserWindow<span class="token punctuation">;</span><span class="token comment">// 保持一个对于 window 对象的全局引用，不然，当 JavaScript 被 GC，</span><span class="token comment">// window 会被自动地关闭</span><span class="token keyword">var</span> mainWindow <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 当所有窗口被关闭了，退出。</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'window-all-closed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在 OS X 上，通常用户在明确地按下 Cmd + Q 之前</span>    <span class="token comment">// 应用会保持活动状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">!=</span> <span class="token string">'darwin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当 Electron 完成了初始化并且准备创建浏览器窗口的时候</span><span class="token comment">// 这个方法就被调用</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建浏览器窗口。</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> width<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>        webPreferences<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            contextIsolation<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            enableRemoteModule<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 加载应用的 index.html</span>    mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">'file://'</span> <span class="token operator">+</span> __dirname <span class="token operator">+</span> <span class="token string">'/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打开开发工具</span>    mainWindow<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当 window 被关闭，这个事件会被发出</span>    mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span>        <span class="token comment">// 通常会把多个 window 对象存放在一个数组里面，</span>        <span class="token comment">// 但这次不是。</span>        mainWindow <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-3-引用库冲突的解决方式"><a href="#Step-3-引用库冲突的解决方式" class="headerlink" title="Step 3. 引用库冲突的解决方式"></a>Step 3. 引用库冲突的解决方式</h3><p>可以暂时跳过这一步，若后续步骤出现问题，返回此处进行修改。<br>参考：<a href="https://www.cnblogs.com/luzhanshi/p/11339134.html" title="Electron对JQuery的支持问题">这篇博客</a></p><p>我使用了该博客中所叙述的办法5，解决了JQeury库的支持问题，具体是在html文件的引用JQeury前加入:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- Insert this line above script imports置于引入jQuery之前--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>window<span class="token punctuation">.</span>module <span class="token operator">=</span> module<span class="token punctuation">;</span>module <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 引入jquery --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将项目打包成-Electron-应用"><a href="#将项目打包成-Electron-应用" class="headerlink" title="将项目打包成 Electron 应用"></a>将项目打包成 Electron 应用</h2><p>这个步骤网上教程也比较多，故省略。</p><p><a href="https://www.cnblogs.com/wxxwjef/p/10402221.html" title="使用Electron将Web项目打包成windows桌面应用">参考博客</a></p><p>在环境搭建完后，安装 electron-packager 工具进行打包，主要的步骤是，命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">electron-packager <span class="token builtin class-name">.</span> app --win --out presenterTool --arch<span class="token operator">=</span>x64 --electron-version <span class="token number">13.1</span>.9 --overwrite --ignore<span class="token operator">=</span>node_modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明如下：</p><blockquote><p>electron-packager . 可执行文件的文件名 –win –out 打包成的文件夹名 –arch=x64位还是32位 –electron-version Electron的版本号 –overwrite –ignore=node_modules</p></blockquote><p>出现下图所示的结果，则表示打包生成可执行文件成功。</p><p><img src="https://cdn.jsdelivr.net/gh/fffqh/img_hosting/img/image-20210815130435978.png" alt="打包成功"></p><h4 id="超时问题的解决"><a href="#超时问题的解决" class="headerlink" title="超时问题的解决"></a>超时问题的解决</h4><p>若运行打包命令后，无反应，或返回HTTP超时等错误，尝试更改默认镜像链接。在系统环境变量中增加如下变量：</p><p><img src="https://cdn.jsdelivr.net/gh/fffqh/img_hosting/img/image-20210815130818706.png" alt="系统环境变量"></p><pre class="line-numbers language-none"><code class="language-none">变量名：ELECTRON_MIRROR变量值：http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;electron&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://www.dagoogle.cn/n/318.html#mulu9" title=" electron-packager打包问题汇总">参考博客</a></p><h2 id="运行APP"><a href="#运行APP" class="headerlink" title="运行APP"></a>运行APP</h2><p>打包成功后，进入应用文件夹(presenterTool)，执行可执行文件(app.exe)，若窗口运行正常，且程序功能与Web应用一致，则打包成功。<br>若出现错误，则根据报错排查问题，重点关注包冲突、是否分开原js与主进程控制js（即分为 index.js 与 main.js）。</p><hr><p>总结：不清楚一个工具的基本原理时，寻找问题的解决办法真是一个困难的事情。猜想+验证，才能找到问题的原因与解决方式。</p><p>当然，清楚工具的基本原理是最好的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web electron javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/12/hello-world/"/>
      <url>/2021/08/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
